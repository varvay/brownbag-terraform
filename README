# Brownbag Session - Terraform Demo
This project is a Terraform demo project and for demo purpose only, which means this project might not explain Terraform features completely and probably missing some good IaC patterns. To understand more about IaC and Terraform, it is highly recommended to read on IaC literatures and Terraform's official documents.

## Table of Contents
- [Brownbag Session - Terraform Demo](#brownbag-session---terraform-demo)
  - [Table of Contents](#table-of-contents)
  - [Some Reading Materials](#some-reading-materials)
    - [Books](#books)
    - [Product's Official Documents](#products-official-documents)
  - [Project Structure](#project-structure)
  - [How to Use This Terraform Project](#how-to-use-this-terraform-project)
    - [AWS account](#aws-account)
    - [Terraform installation](#terraform-installation)
    - [Initiate project](#initiate-project)
    - [Validate configuration](#validate-configuration)
    - [Implementation plan](#implementation-plan)
    - [Apply configuration](#apply-configuration)
    - [Destroy provisioned infrastructure](#destroy-provisioned-infrastructure)
  - [P.S](#ps)

## Some Reading Materials
### Books
* [Brikman, Yevgeniy. (2022). *Terraform Up and Running: Writing Infrastructure as Code* (3rd ed.). O'Reilly Media.](https://www.oreilly.com/library/view/terraform-up-and/9781098116736/)
* [Morris, Kief. (2021). *Infrastructure as Code: Dynamic Systems for the Cloud Age* (2nd ed.). O'Reilly Media.](https://www.oreilly.com/library/view/infrastructure-as-code/9781098114664/)
* [Winkler, Scott. (2021). *Terraform in Action*. Manning Publications.](https://www.oreilly.com/library/view/terraform-in-action/9781617296895/)
* [Wang, Rosemary. (2022). *Infrastructure as Code, Patterns and Practices: With examples in Python and Terraform*. Manning Publications.](https://www.oreilly.com/library/view/infrastructure-as-code/9781617298295/)
### Product's Official Documents
* [*Terraform Docs*. HashiCorp](https://developer.hashicorp.com/terraform)

## Project Structure
This project structured in a certain format to achieve high degree of readability, maintainability, modularity and reusability as described below,
```
├── .terraform/             // Terraform auto-generated files
├── modules/                // reusable modules
    ├── backendServer/      // backend server module
        ├── main.tf         // configuration file
        ├── variables.tf    // input variables definition
        ├── README
    ├── database/           // database module
        ├── main.tf         // configuration file
        ├── variables.tf    // input variables definition
        ├── README
    ├── vpc/                // vpc module
        ├── main.tf         // configuration file
        ├── variables.tf    // input variables definition
        ├── README
├── main.tf                 // root module configuration file
├── variables.tf            // root module input variables definition
├── README
```

## How to Use This Terraform Project

### AWS account
All of the modules in this project build upon AWS cloud, so make sure that you have an AWS account. Don't forget to clean up everything generated by this project since some of the services used may charge you for usage.

### Terraform installation
To be able to perform Terraform-related task on your local machine, you need to install Terraform first by following the [Terraform installation guide](https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli).

### Initiate project
To be able to interact with this project, it is mandatory to initialize this working directory that will define Terraform configuration and providers required later. This can be achieved by issuing the following command,
```
terraform init
```
This project initiation should be repeated in case new module introduced or there is changes on provider's configuration

### Validate configuration
This step isn't really necessary. You can validate your Terraform configuration by issuing the following command,
```
terraform validate
```

### Implementation plan
This step isn't really necessary. Terraform can show you changes that will be implemented later by comparing your Terraform configuration with the current Terraform state. This can be achieved by issuing the following command,
```
terraform plan
```

### Apply configuration
To apply the changes you can execute the command below,
```
terraform apply
```

### Destroy provisioned infrastructure
To destroy the previously-created infrastructure, you can issue the following command,
```
terraform destroy
```

## P.S
* Some of the modules have a pre-requisite steps e.g. manual generation of EC2 key pair, so make sure that you read carefully each module's `README`